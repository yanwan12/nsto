// rf.c
// 22/11/2013

#include <pthread.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

#include "rf.h"
#include "com.h"
#include "trace.h"
#include "rf_protocol.h"
#include "frame.h"
#include "tool.h"

static unsigned long 	ulTraceModule = TRC_MODULE_THREAD_RF;
static int		ulDescAdd;

static void init 		(void);
static void end  		(void);
static int  send_wait_cmd	(char * _pc_input_buffer, int _n_input_buffer_len, char * _pc_output_buffer, int _n_output_buffer_len);
static void manage_reception    (char * _pc_reception);
static void manage_get_desc	(void);
static void send_cmd		(char * _pc_cmd, int _n_cmd_len);

/******************************************************************************/
/******************************************************************************/
void * rf_Thread 
(
	void * p_arg
)
{
	int 		n_return = 0;
	char 		ac_reception [MAX_LEN_RF_FRAME];
	void * 		pv_return = NULL;
	char		b_end = 0;
	pstFrame	pst_frame;

	trcTrace0 (ulTraceModule, "Start of rf_Thread", 1, 1);

	if (p_arg != NULL)
	{
		pv_return = (void*)1;
		goto LABEL_EXIT;
	}

	init ();

	do
	{
		n_return = comRead (ac_reception, sizeof(ac_reception));

		if (n_return > 0)
		{
			manage_reception (ac_reception);
		}

		usleep(10000);
		
		b_end = toolTestEndFile();
	}
	while (!b_end);

	end ();

LABEL_EXIT :

	pthread_exit (pv_return);
}

/******************************************************************************/
/******************************************************************************/
static void init 
(
	void
)
{
	char ac_output_buffer [255];

	comInit ();

	trcTrace0 (ulTraceModule, "Send get desciptor of the key", 1, 1);

	send_wait_cmd (acRfpCmdKeyGetDescriptor, sizeof(acRfpCmdKeyGetDescriptor), ac_output_buffer, sizeof(ac_output_buffer));

	trcTrace0 (ulTraceModule, "Start key", 1, 1);

	usleep (10000);

	send_wait_cmd (acRfpCmdKeyStart, sizeof(acRfpCmdKeyStart), ac_output_buffer, sizeof(ac_output_buffer));

	//memcpy (acKeySn, &ac_output_buffer[2], LEN_SERIAL_NB);
	comSetKeySn (&ac_output_buffer[7]);

	trcTrace0 (ulTraceModule, "End of start key", 1, 1);
}

/******************************************************************************/
/******************************************************************************/
static void end 
(
	void
)
{
	trcTrace0(ulTraceModule, "End of thread rf", 1, 1);
}

/******************************************************************************/
/******************************************************************************/
static int send_wait_cmd
(
	char * _pc_input_buffer,
	int    _n_input_buffer_len,
	char * _pc_output_buffer,
	int    _n_output_buffer_len
)
{
	int n_return = 0;
	int n_offset = 0;
	send_cmd (_pc_input_buffer, _n_input_buffer_len);

	do
	{
		usleep (50000);
		int n_return = comRead (_pc_output_buffer, _n_output_buffer_len);
		if (-1 == n_return)
		{
			break;
		}
		
		n_offset = 0;

		do
		{
			pstFrame pst_new_frame = frmConstructor (&_pc_output_buffer[n_offset], 0);
			//trcTraceFrame (ulTraceModule, pst_new_frame, 1, 1);

			if (pst_new_frame->cTag != 0x4C)
			{
				trcTraceFrame (ulTraceModule, pst_new_frame, 1, 1);
				break;
			}
			n_offset += MAX_LEN_RF_FRAME;
			free (pst_new_frame);			
		}
		while (n_offset < n_return);
	}
	while (1);

	return n_return;
}

/******************************************************************************/
/******************************************************************************/
static void manage_reception
(
	char * _pc_reception
)
{	
	pstFrame pst_new_frame = frmConstructor (_pc_reception, 0);

	trcTraceFrame (ulTraceModule, pst_new_frame, 1, 1);

	switch (pst_new_frame->cTag)
	{
		case TAG_MEASURE:
		case TAG_MEASURE_ACK:
			manage_get_desc ();
			break;

	}

}

/******************************************************************************/
/******************************************************************************/
static void manage_get_desc
(
	void
)
{
	int n_state = 0;
	char ac_output_buffer [255];
	char * pc_cmd;
	
	trcTrace0 (ulTraceModule, "manage_get_desc function", 1, 1);
	
	do
	{
		usleep(10000);
		switch(n_state)
		{
			case 0:
				trcTrace0 (ulTraceModule, "Desc start cmd", 1, 1);
				send_wait_cmd (acRfpCmdLoggerGetDescStart, sizeof(acRfpCmdLoggerGetDescStart), ac_output_buffer, sizeof(ac_output_buffer));
				n_state++;
				ulDescAdd = 0x1FF0;
				break;

			case 1:
				trcTrace0 (ulTraceModule, "Desc next cmd", 1, 1);
				pc_cmd = acRfpCmdLoggerGetDescNext;
				pc_cmd[0x13] = (char) (ulDescAdd >> 8);
				pc_cmd[0x14] = (char) (ulDescAdd);
				send_wait_cmd (pc_cmd, sizeof(acRfpCmdLoggerGetDescNext), ac_output_buffer, sizeof(ac_output_buffer));
				ulDescAdd -= 0x10;
				if (0x1F50 == ulDescAdd)
				{
					n_state++;
				}
				break;	

			case 2:
				trcTrace0 (ulTraceModule, "Desc last cmd", 1, 1);
				pc_cmd = acRfpCmdLoggerGetDescLast;
				pc_cmd[0x13] = (char) (ulDescAdd >> 8);
				pc_cmd[0x14] = (char) (ulDescAdd);
				send_wait_cmd (pc_cmd, sizeof(acRfpCmdLoggerGetDescLast), ac_output_buffer, sizeof(ac_output_buffer));
				n_state++;
				
			default:
				break;
		}
	}
	while (n_state <= 2);

}

/******************************************************************************/
/******************************************************************************/
static void send_cmd 
(
	char * _pc_cmd, 
	int   _n_cmd_len
)
{

	pstFrame pst_new_frame = frmConstructor (_pc_cmd, 1);

	trcTraceFrame (ulTraceModule, pst_new_frame, 1, 1);

	comWrite (_pc_cmd, _n_cmd_len);

	//free (pst_new_frame);
}



// End of rf.c

